{"version":3,"sources":["components/Form/Form.jsx","components/Calendar/Calendar.jsx","components/Search/Search.jsx","components/AvailabilityTable/AvailabilityTable.jsx","components/Nearby/Nearby.jsx","components/App/App.js","serviceWorker.js","index.js"],"names":["QueryForm","state","buildings","rooms","selectBuilding","e","props","target","value","refreshRooms","selectRoom","building","setState","find","b","className","this","Form","Group","controlId","Label","Control","as","onChange","defaultBuilding","map","key","defaultRoom","room","Button","type","onClick","submit","buttonText","callAPI","fetch","then","res","json","catch","err","Component","Calendar","calendarComponentRef","React","createRef","times","events","plugins","dayGridPlugin","timeGridPlugin","ref","defaultView","visibleRange","start","end","header","left","right","weekends","allDaySlot","columnHeaderFormat","weekday","minTime","scrollTime","temp","filter","time","weekdays","match","RegExp","sort","a","start_time","reduce","length","push","Object","assign","day","Date","end_time","concat","formatTimesOnWeekday","params","formatTimes","current","getApi","gotoDate","displayCalendar","prevProps","refreshCalendar","Search","showCalendar","r","history","path","render","prevParams","currParams","AvailabilityTable","emptyRooms","findEmptyRooms","async","possibleRooms","numRooms","i","roomSchedule","date","getDay","currentTime","toLocaleTimeString","navigator","language","hourCycle","hour","minute","dayString","classes","nextClass","Table","refreshTable","Nearby","showNearby","showAvailabilityTable","App","Navbar","bg","variant","Nav","Link","href","component","exact","Boolean","window","location","hostname","ReactDOM","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3c8db786.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\n\nexport default class QueryForm extends Component {\n  state = {\n    buildings: [],\n    rooms: []\n  }\n\n  render() {\n    return (\n      <div className={this.props.className}>\n        <Form>\n          <Form.Group controlId=\"form.building\">\n            <Form.Label>Building Code</Form.Label>\n            <Form.Control as=\"select\" onChange={this.selectBuilding} value={this.props.defaultBuilding}>\n              {\n                this.state.buildings.map(b => {\n                  return (<option key={b.building} value={b.building}>{b.building}</option>);\n                })\n              }\n            </Form.Control>\n          </Form.Group>\n          <Form.Group controlId=\"form.room\">\n            <Form.Label>Room Number</Form.Label>\n            <Form.Control as=\"select\" onChange={this.selectRoom} value={this.props.defaultRoom}>\n              <option></option>\n              {\n                this.state.rooms.map(room => {\n                  return (<option key={room} value={room}>{room}</option>);\n                })\n              }\n            </Form.Control>\n          </Form.Group>\n        </Form>\n        <Button type=\"submit\" onClick={this.props.submit}>\n          {this.props.buttonText || \"Search\"}\n        </Button>\n      </div>\n    );\n  }\n\n  componentDidMount() {\n    this.callAPI();\n  }\n\n  callAPI() {\n    fetch(\"/api/buildings\")\n    .then(res => res.json())\n    .then(res => {\n      this.setState({ buildings: res }, () => {\n        // manually trigger selectBuilding event handler\n        const b = this.props.defaultBuilding ? this.props.defaultBuilding : this.state.buildings[0].building;\n        this.props.selectBuilding(b);\n        this.refreshRooms(b);\n      })\n    })\n    .catch(err => err);\n  }\n\n  selectBuilding = e => {\n    this.props.selectBuilding(e.target.value);\n    this.refreshRooms(e.target.value);\n  }\n\n  selectRoom = e => {\n    this.props.selectRoom(e.target.value);\n  }\n\n  refreshRooms = building => {\n    let { buildings } = this.state;\n    this.setState({ rooms: buildings.find(b => b.building === building).rooms});\n  }\n}\n","import React, { Component } from 'react';\nimport FullCalendar from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport \"@fullcalendar/core/main.css\";\nimport \"@fullcalendar/daygrid/main.css\";\nimport \"@fullcalendar/timegrid/main.css\";\n\nexport default class Calendar extends Component {\n  calendarComponentRef = React.createRef();\n\n  state = {\n    times: [],\n    events: []\n  };\n\n  render() {\n    return (\n      <FullCalendar\n        plugins={[dayGridPlugin, timeGridPlugin]}\n        ref={this.calendarComponentRef}\n        events={this.state.events}\n        // display\n        defaultView=\"timeGridWeek\"\n        visibleRange={{\n          start: '2020-06-01',\n          end: '2020-06-05'\n        }}\n        header={{\n          left: \"\",\n          // right: \"timeGridWeek,timeGridDay,listWeek\"\n          right: \"\"\n        }}\n        weekends={false}\n        allDaySlot={false}\n        columnHeaderFormat={{weekday: 'long'}}\n        minTime={\"6:00:00\"}\n        scrollTime={\"8:00:00\"}\n        // titleFormat={{ year: 'numeric', month: '2-digit', day: '2-digit' }}\n      />\n    );\n  }\n\n  formatTimesOnWeekday(weekday) {\n    // deep copy times to temp\n    let temp = this.state.times.filter(time => time.weekdays.match(new RegExp(weekday)))\n      .sort((a,b) => (a.start_time > b.start_time) ? 1 : ((b.start_time > a.start_time) ? -1 : 0))\n      .reduce((a, b) => { if (a.length == 0 || a[a.length - 1].start_time != b.start_time) a.push(b); return a; }, [])\n      .map(a => Object.assign({}, a));\n    \n    let day = \"01\";\n    if (weekday == \"T(?!h)\") day = \"02\";\n    if (weekday == \"W\") day = \"03\";\n    if (weekday == \"Th\") day = \"04\";\n    if (weekday == \"F\") day = \"05\";\n\n    return temp.map(a => {\n      return ({\n        start: new Date(\"2020-06-\" + day + \" \" + a.start_time),\n        end: new Date(\"2020-06-\" + day + \" \" + a.end_time),\n      });\n    })\n  }\n  \n  formatTimes() {\n    let temp = [];\n    temp = temp.concat(this.formatTimesOnWeekday(\"M\"));\n    temp = temp.concat(this.formatTimesOnWeekday(\"T(?!h)\"));\n    temp = temp.concat(this.formatTimesOnWeekday(\"W\"));\n    temp = temp.concat(this.formatTimesOnWeekday(\"Th\"));\n    temp = temp.concat(this.formatTimesOnWeekday(\"F\"));\n    this.setState({ events: temp });\n  }\n\n  displayCalendar() {\n    const { building, room } = this.props.match.params;\n    // call API\n    fetch(`/api/building/${building}/${room}/courses`)\n      .then(res => res.json())\n      .then(res => this.setState({ times: res }, () => this.formatTimes()))\n      .catch(err => err);\n    // display calender\n    let calendarApi = this.calendarComponentRef.current.getApi();\n    calendarApi.gotoDate(\"2020-06-01\");\n  }\n\n  componentDidMount() {\n    this.displayCalendar();\n  }\n  \n  componentDidUpdate(prevProps) {\n    if (this.props.refreshCalendar && prevProps.refreshCalendar != this.props.refreshCalendar) {\n      this.displayCalendar();\n    }\n  }\n}\n","import React, { Component } from 'react';\nimport { Route } from 'react-router-dom';\nimport Form from '../Form/Form';\nimport Calendar from '../Calendar/Calendar';\nimport './Search.css';\n\nexport default class Search extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      building: props.match.params.building,\n      room: props.match.params.room,\n      showCalendar: false\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"search\">\n        <Form\n          className=\"queryform\"\n          key={`${this.props.match.params.building}${this.props.match.params.room}`}\n          defaultBuilding={this.state.building}\n          defaultRoom={this.state.room}\n          selectBuilding={this.selectBuilding}\n          selectRoom={this.selectRoom}\n          submit={this.showCalendar}\n        />\n\n        <div className=\"calendar\">\n          <Route\n            path='/:building/:room'\n            render={(props) => {\n              return (\n                <Calendar\n                  key={`${this.props.match.params.building}${this.props.match.params.room}`}\n                  refreshCalendar={this.state.showCalendar}\n                  {...props}\n                />\n              );\n            }}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  selectBuilding = b => {\n    this.setState({ showCalendar: false });\n    this.setState({ building: b });\n  }\n\n  selectRoom = r => {\n    this.setState({ showCalendar: false });\n    this.setState({ room: r });\n  }\n\n  showCalendar = () => {\n    this.setState({ showCalendar: true });\n    this.props.history.push(`/${this.state.building}/${this.state.room}`);\n  }\n\n  componentDidUpdate(prevProps) {\n    const prevParams = prevProps.match.params;\n    const currParams = this.props.match.params;\n    if (currParams.building != prevParams.building || currParams.room != prevParams.room) {\n      this.setState({\n        building: this.props.match.params.building,\n        room: this.props.match.params.room\n      });\n    }\n  }\n}\n","import React, { Component } from 'react';\nimport Table from 'react-bootstrap/Table';\n\nexport default class AvailabilityTable extends Component {\n  state = {\n    emptyRooms: []\n  };\n\n  render() {\n    return (\n      <Table className={this.props.className}>\n        <thead>\n          <tr>\n            <th>Room</th>\n            <th>Available Until</th>\n          </tr>\n        </thead>\n        <tbody>\n          {\n            this.state.emptyRooms.map(room => {\n              return (\n                <tr key={room.room}>\n                  <td>{room.room}</td>\n                  <td>Available until {room.time || \"closing\"}</td>\n                </tr>\n              );\n            })\n          }\n        </tbody>\n      </Table>\n    );\n  }\n\n  findEmptyRooms = async () => {\n    const { building, room } = this.props.match.params;\n    let emptyRooms = [];\n    let possibleRooms = await fetch(`/api/building/${building}/rooms`)\n      .then(res => res.json());\n    const numRooms = possibleRooms.length;\n    for (let i = 0; i < numRooms; ++i) {\n      let roomSchedule = await fetch(`/api/building/${building}/${possibleRooms[i]}/courses`)\n      .then(res => res.json());\n      // TODO: make less messy\n      const date = new Date();\n      const day = date.getDay();\n      const currentTime = date.toLocaleTimeString(navigator.language, {hourCycle: \"h24\", hour: '2-digit', minute:'2-digit'});\n      let dayString = \"\";\n      if (day === 1) dayString = \"M\";\n      else if (day === 2) dayString = \"T(?!h)\";\n      if (day === 3) dayString = \"W\";\n      if (day === 4) dayString = \"Th\";\n      if (day === 5) dayString = \"F\";\n      const classes = roomSchedule.filter(time => time.weekdays.match(new RegExp(dayString)))\n        .sort((a,b) => (a.start_time > b.start_time) ? 1 : ((b.start_time > a.start_time) ? -1 : 0))\n        .reduce((a, b) => { if (a.length == 0 || a[a.length - 1].start_time != b.start_time) a.push(b); return a; }, [])\n      \n      if (!classes.find(a => a.start_time <= currentTime && a.end_time > currentTime)) {\n        const nextClass = classes.find(a => a.start_time > currentTime);\n        emptyRooms.push({ \"room\": possibleRooms[i], \"time\": (nextClass ? nextClass.start_time : nextClass)});\n      }\n    }\n    this.setState({ emptyRooms: emptyRooms });\n  }\n\n  componentDidMount() {\n    this.findEmptyRooms();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.refreshTable && prevProps.refreshTable != this.props.refreshTable) {\n      this.findEmptyRooms();\n    }\n  }\n}\n","import React, { Component } from 'react';\nimport { Route } from 'react-router-dom';\nimport Form from '../Form/Form';\nimport AvailabilityTable from '../AvailabilityTable/AvailabilityTable';\n\nimport './Nearby.css';\n\nexport default class Nearby extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      building: props.match.params.building,\n      room: props.match.params.room,\n      emptyRooms: [],\n      showNearby: false\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"nearby\">\n        <Form\n          className=\"queryform\"\n          key={`${this.props.match.params.building}${this.props.match.params.room}`}\n          defaultBuilding={this.state.building}\n          defaultRoom={this.state.room}\n          selectBuilding={this.selectBuilding}\n          selectRoom={this.selectRoom}\n          submit={this.showAvailabilityTable}\n          buttonText={\"Find Nearby\"}\n        />\n\n        <div className=\"results\">\n          <Route\n            path='/nearby/:building/:room'\n            render={(props) => {\n              return (\n                <AvailabilityTable\n                  key={`${this.props.match.params.building}${this.props.match.params.room}`}\n                  refreshTable={this.state.showNearby}\n                  {...props}\n                />\n              );\n            }}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  selectBuilding = b => {\n    this.setState({ showNearby: false });\n    this.setState({ building: b });\n  }\n\n  selectRoom = r => {\n    this.setState({ showNearby: false });\n    this.setState({ room: r });\n  }\n\n  showAvailabilityTable = () => {\n    this.setState({ showNearby: true });\n    this.props.history.push(`/nearby/${this.state.building}/${this.state.room}`);\n  }\n\n  componentDidUpdate(prevProps) {\n    const prevParams = prevProps.match.params;\n    const currParams = this.props.match.params;\n    if (currParams.building != prevParams.building || currParams.room != prevParams.room) {\n      this.setState({\n        building: this.props.match.params.building,\n        room: this.props.match.params.room\n      });\n    }\n  }\n}\n","import React, { Component } from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport Search from '../Search/Search';\nimport Nearby from '../Nearby/Nearby';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Navbar bg=\"light\" variant=\"light\">\n          <Nav className=\"mr-auto\">\n            <Nav.Link href=\"/\">Search Any Room</Nav.Link>\n            <Nav.Link href=\"/nearby\">Find Open Rooms Nearby</Nav.Link>\n          </Nav>\n        </Navbar>\n        <Switch>\n          <Route path='/nearby/:building/:room' component={Nearby} />\n          <Route exact path='/nearby' component={Nearby} />\n          <Route path='/:building/:room' component={Search} />\n          <Route exact path='/' component={Search} />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render((\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}